///////////////////////////////////////////////////////////////////////////////
//  Copyright (c) 1995/2016 Xilinx, Inc.
//  All Right Reserved.
///////////////////////////////////////////////////////////////////////////////
//   ____  ____
//  /   /\/   /
// /___/  \  /     Vendor      : Xilinx
// \   \   \/      Version     : 2016.1
//  \   \          Description : Xilinx Unified Simulation Library Component
//  /   /                        VCU
// /___/   /\      Filename    : VCU.v
// \   \  /  \
//  \___\/\___\
//
///////////////////////////////////////////////////////////////////////////////
//  Revision:
//
//  End Revision:
///////////////////////////////////////////////////////////////////////////////

`timescale 1 ps / 1 ps

`celldefine

module VCU #(
`ifdef XIL_TIMING
  parameter LOC = "UNPLACED",
`endif
  parameter integer CORECLKREQ = 667,
  parameter integer DECHORRESOLUTION = 3840,
  parameter DECODERCHROMAFORMAT = "4_2_2",
  parameter DECODERCODING = "H.265",
  parameter integer DECODERCOLORDEPTH = 10,
  parameter integer DECODERNUMCORES = 2,
  parameter integer DECVERTRESOLUTION = 2160,
  parameter ENABLEDECODER = "TRUE",
  parameter ENABLEENCODER = "TRUE",
  parameter integer ENCHORRESOLUTION = 3840,
  parameter ENCODERCHROMAFORMAT = "4_2_2",
  parameter ENCODERCODING = "H.265",
  parameter integer ENCODERCOLORDEPTH = 10,
  parameter integer ENCODERNUMCORES = 4,
  parameter integer ENCVERTRESOLUTION = 2160
)(
  output VCUPLARREADYAXILITEAPB,
  output VCUPLAWREADYAXILITEAPB,
  output [1:0] VCUPLBRESPAXILITEAPB,
  output VCUPLBVALIDAXILITEAPB,
  output VCUPLCORESTATUSCLKPLL,
  output [43:0] VCUPLDECARADDR0,
  output [43:0] VCUPLDECARADDR1,
  output [1:0] VCUPLDECARBURST0,
  output [1:0] VCUPLDECARBURST1,
  output [3:0] VCUPLDECARCACHE0,
  output [3:0] VCUPLDECARCACHE1,
  output [3:0] VCUPLDECARID0,
  output [3:0] VCUPLDECARID1,
  output [7:0] VCUPLDECARLEN0,
  output [7:0] VCUPLDECARLEN1,
  output VCUPLDECARPROT0,
  output VCUPLDECARPROT1,
  output [3:0] VCUPLDECARQOS0,
  output [3:0] VCUPLDECARQOS1,
  output [2:0] VCUPLDECARSIZE0,
  output [2:0] VCUPLDECARSIZE1,
  output VCUPLDECARVALID0,
  output VCUPLDECARVALID1,
  output [43:0] VCUPLDECAWADDR0,
  output [43:0] VCUPLDECAWADDR1,
  output [1:0] VCUPLDECAWBURST0,
  output [1:0] VCUPLDECAWBURST1,
  output [3:0] VCUPLDECAWCACHE0,
  output [3:0] VCUPLDECAWCACHE1,
  output [3:0] VCUPLDECAWID0,
  output [3:0] VCUPLDECAWID1,
  output [7:0] VCUPLDECAWLEN0,
  output [7:0] VCUPLDECAWLEN1,
  output VCUPLDECAWPROT0,
  output VCUPLDECAWPROT1,
  output [3:0] VCUPLDECAWQOS0,
  output [3:0] VCUPLDECAWQOS1,
  output [2:0] VCUPLDECAWSIZE0,
  output [2:0] VCUPLDECAWSIZE1,
  output VCUPLDECAWVALID0,
  output VCUPLDECAWVALID1,
  output VCUPLDECBREADY0,
  output VCUPLDECBREADY1,
  output VCUPLDECRREADY0,
  output VCUPLDECRREADY1,
  output [127:0] VCUPLDECWDATA0,
  output [127:0] VCUPLDECWDATA1,
  output VCUPLDECWLAST0,
  output VCUPLDECWLAST1,
  output VCUPLDECWVALID0,
  output VCUPLDECWVALID1,
  output [16:0] VCUPLENCALL2CADDR,
  output VCUPLENCALL2CRVALID,
  output [319:0] VCUPLENCALL2CWDATA,
  output VCUPLENCALL2CWVALID,
  output [43:0] VCUPLENCARADDR0,
  output [43:0] VCUPLENCARADDR1,
  output [1:0] VCUPLENCARBURST0,
  output [1:0] VCUPLENCARBURST1,
  output [3:0] VCUPLENCARCACHE0,
  output [3:0] VCUPLENCARCACHE1,
  output [3:0] VCUPLENCARID0,
  output [3:0] VCUPLENCARID1,
  output [7:0] VCUPLENCARLEN0,
  output [7:0] VCUPLENCARLEN1,
  output VCUPLENCARPROT0,
  output VCUPLENCARPROT1,
  output [3:0] VCUPLENCARQOS0,
  output [3:0] VCUPLENCARQOS1,
  output [2:0] VCUPLENCARSIZE0,
  output [2:0] VCUPLENCARSIZE1,
  output VCUPLENCARVALID0,
  output VCUPLENCARVALID1,
  output [43:0] VCUPLENCAWADDR0,
  output [43:0] VCUPLENCAWADDR1,
  output [1:0] VCUPLENCAWBURST0,
  output [1:0] VCUPLENCAWBURST1,
  output [3:0] VCUPLENCAWCACHE0,
  output [3:0] VCUPLENCAWCACHE1,
  output [3:0] VCUPLENCAWID0,
  output [3:0] VCUPLENCAWID1,
  output [7:0] VCUPLENCAWLEN0,
  output [7:0] VCUPLENCAWLEN1,
  output VCUPLENCAWPROT0,
  output VCUPLENCAWPROT1,
  output [3:0] VCUPLENCAWQOS0,
  output [3:0] VCUPLENCAWQOS1,
  output [2:0] VCUPLENCAWSIZE0,
  output [2:0] VCUPLENCAWSIZE1,
  output VCUPLENCAWVALID0,
  output VCUPLENCAWVALID1,
  output VCUPLENCBREADY0,
  output VCUPLENCBREADY1,
  output VCUPLENCRREADY0,
  output VCUPLENCRREADY1,
  output [127:0] VCUPLENCWDATA0,
  output [127:0] VCUPLENCWDATA1,
  output VCUPLENCWLAST0,
  output VCUPLENCWLAST1,
  output VCUPLENCWVALID0,
  output VCUPLENCWVALID1,
  output [43:0] VCUPLMCUMAXIICDCARADDR,
  output [1:0] VCUPLMCUMAXIICDCARBURST,
  output [3:0] VCUPLMCUMAXIICDCARCACHE,
  output [2:0] VCUPLMCUMAXIICDCARID,
  output [7:0] VCUPLMCUMAXIICDCARLEN,
  output VCUPLMCUMAXIICDCARLOCK,
  output [2:0] VCUPLMCUMAXIICDCARPROT,
  output [3:0] VCUPLMCUMAXIICDCARQOS,
  output [2:0] VCUPLMCUMAXIICDCARSIZE,
  output VCUPLMCUMAXIICDCARVALID,
  output [43:0] VCUPLMCUMAXIICDCAWADDR,
  output [1:0] VCUPLMCUMAXIICDCAWBURST,
  output [3:0] VCUPLMCUMAXIICDCAWCACHE,
  output [2:0] VCUPLMCUMAXIICDCAWID,
  output [7:0] VCUPLMCUMAXIICDCAWLEN,
  output VCUPLMCUMAXIICDCAWLOCK,
  output [2:0] VCUPLMCUMAXIICDCAWPROT,
  output [3:0] VCUPLMCUMAXIICDCAWQOS,
  output [2:0] VCUPLMCUMAXIICDCAWSIZE,
  output VCUPLMCUMAXIICDCAWVALID,
  output VCUPLMCUMAXIICDCBREADY,
  output VCUPLMCUMAXIICDCRREADY,
  output [31:0] VCUPLMCUMAXIICDCWDATA,
  output VCUPLMCUMAXIICDCWLAST,
  output [3:0] VCUPLMCUMAXIICDCWSTRB,
  output VCUPLMCUMAXIICDCWVALID,
  output VCUPLMCUSTATUSCLKPLL,
  output VCUPLPINTREQ,
  output VCUPLPLLSTATUSPLLLOCK,
  output VCUPLPWRSUPPLYSTATUSVCCAUX,
  output VCUPLPWRSUPPLYSTATUSVCUINT,
  output [31:0] VCUPLRDATAAXILITEAPB,
  output [1:0] VCUPLRRESPAXILITEAPB,
  output VCUPLRVALIDAXILITEAPB,
  output VCUPLWREADYAXILITEAPB,

  input INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD,
  input [19:0] PLVCUARADDRAXILITEAPB,
  input [2:0] PLVCUARPROTAXILITEAPB,
  input PLVCUARVALIDAXILITEAPB,
  input [19:0] PLVCUAWADDRAXILITEAPB,
  input [2:0] PLVCUAWPROTAXILITEAPB,
  input PLVCUAWVALIDAXILITEAPB,
  input PLVCUAXIDECCLK,
  input PLVCUAXIENCCLK,
  input PLVCUAXILITECLK,
  input PLVCUAXIMCUCLK,
  input PLVCUBREADYAXILITEAPB,
  input PLVCUCORECLK,
  input PLVCUDECARREADY0,
  input PLVCUDECARREADY1,
  input PLVCUDECAWREADY0,
  input PLVCUDECAWREADY1,
  input [3:0] PLVCUDECBID0,
  input [3:0] PLVCUDECBID1,
  input [1:0] PLVCUDECBRESP0,
  input [1:0] PLVCUDECBRESP1,
  input PLVCUDECBVALID0,
  input PLVCUDECBVALID1,
  input [127:0] PLVCUDECRDATA0,
  input [127:0] PLVCUDECRDATA1,
  input [3:0] PLVCUDECRID0,
  input [3:0] PLVCUDECRID1,
  input PLVCUDECRLAST0,
  input PLVCUDECRLAST1,
  input [1:0] PLVCUDECRRESP0,
  input [1:0] PLVCUDECRRESP1,
  input PLVCUDECRVALID0,
  input PLVCUDECRVALID1,
  input PLVCUDECWREADY0,
  input PLVCUDECWREADY1,
  input [319:0] PLVCUENCALL2CRDATA,
  input PLVCUENCALL2CRREADY,
  input PLVCUENCARREADY0,
  input PLVCUENCARREADY1,
  input PLVCUENCAWREADY0,
  input PLVCUENCAWREADY1,
  input [3:0] PLVCUENCBID0,
  input [3:0] PLVCUENCBID1,
  input [1:0] PLVCUENCBRESP0,
  input [1:0] PLVCUENCBRESP1,
  input PLVCUENCBVALID0,
  input PLVCUENCBVALID1,
  input PLVCUENCL2CCLK,
  input [127:0] PLVCUENCRDATA0,
  input [127:0] PLVCUENCRDATA1,
  input [3:0] PLVCUENCRID0,
  input [3:0] PLVCUENCRID1,
  input PLVCUENCRLAST0,
  input PLVCUENCRLAST1,
  input [1:0] PLVCUENCRRESP0,
  input [1:0] PLVCUENCRRESP1,
  input PLVCUENCRVALID0,
  input PLVCUENCRVALID1,
  input PLVCUENCWREADY0,
  input PLVCUENCWREADY1,
  input PLVCUMCUCLK,
  input PLVCUMCUMAXIICDCARREADY,
  input PLVCUMCUMAXIICDCAWREADY,
  input [2:0] PLVCUMCUMAXIICDCBID,
  input [1:0] PLVCUMCUMAXIICDCBRESP,
  input PLVCUMCUMAXIICDCBVALID,
  input [31:0] PLVCUMCUMAXIICDCRDATA,
  input [2:0] PLVCUMCUMAXIICDCRID,
  input PLVCUMCUMAXIICDCRLAST,
  input [1:0] PLVCUMCUMAXIICDCRRESP,
  input PLVCUMCUMAXIICDCRVALID,
  input PLVCUMCUMAXIICDCWREADY,
  input PLVCUPLLREFCLKPL,
  input PLVCURAWRSTN,
  input PLVCURREADYAXILITEAPB,
  input [31:0] PLVCUWDATAAXILITEAPB,
  input [3:0] PLVCUWSTRBAXILITEAPB,
  input PLVCUWVALIDAXILITEAPB
);

// define constants
  localparam MODULE_NAME = "VCU";

// Parameter encodings and registers
  localparam DECODERCHROMAFORMAT_4_2_0 = 1;
  localparam DECODERCHROMAFORMAT_4_2_2 = 0;
  localparam DECODERCODING_H_264 = 1;
  localparam DECODERCODING_H_265 = 0;
  localparam DECODERCOLORDEPTH_10 = 0;
  localparam DECODERCOLORDEPTH_8 = 1;
  localparam ENABLEDECODER_FALSE = 1;
  localparam ENABLEDECODER_TRUE = 0;
  localparam ENABLEENCODER_FALSE = 1;
  localparam ENABLEENCODER_TRUE = 0;
  localparam ENCODERCHROMAFORMAT_4_2_0 = 1;
  localparam ENCODERCHROMAFORMAT_4_2_2 = 0;
  localparam ENCODERCODING_H_264 = 1;
  localparam ENCODERCODING_H_265 = 0;
  localparam ENCODERCOLORDEPTH_10 = 0;
  localparam ENCODERCOLORDEPTH_8 = 1;

  reg trig_attr = 1'b0;
// include dynamic registers - XILINX test only
`ifdef XIL_DR
  `include "VCU_dr.v"
`else
  localparam  [9:0] CORECLKREQ_REG = CORECLKREQ;
  localparam  [13:0] DECHORRESOLUTION_REG = DECHORRESOLUTION;
  localparam [40:1] DECODERCHROMAFORMAT_REG = DECODERCHROMAFORMAT;
  localparam [40:1] DECODERCODING_REG = DECODERCODING;
  localparam  [3:0] DECODERCOLORDEPTH_REG = DECODERCOLORDEPTH;
  localparam  [1:0] DECODERNUMCORES_REG = DECODERNUMCORES;
  localparam  [12:0] DECVERTRESOLUTION_REG = DECVERTRESOLUTION;
  localparam [40:1] ENABLEDECODER_REG = ENABLEDECODER;
  localparam [40:1] ENABLEENCODER_REG = ENABLEENCODER;
  localparam  [13:0] ENCHORRESOLUTION_REG = ENCHORRESOLUTION;
  localparam [40:1] ENCODERCHROMAFORMAT_REG = ENCODERCHROMAFORMAT;
  localparam [40:1] ENCODERCODING_REG = ENCODERCODING;
  localparam  [3:0] ENCODERCOLORDEPTH_REG = ENCODERCOLORDEPTH;
  localparam  [2:0] ENCODERNUMCORES_REG = ENCODERNUMCORES;
  localparam  [12:0] ENCVERTRESOLUTION_REG = ENCVERTRESOLUTION;
`endif

  wire [9:0] CORECLKREQ_BIN;
  wire [13:0] DECHORRESOLUTION_BIN;
  wire DECODERCHROMAFORMAT_BIN;
  wire DECODERCODING_BIN;
  wire DECODERCOLORDEPTH_BIN;
  wire [1:0] DECODERNUMCORES_BIN;
  wire [12:0] DECVERTRESOLUTION_BIN;
  wire ENABLEDECODER_BIN;
  wire ENABLEENCODER_BIN;
  wire [13:0] ENCHORRESOLUTION_BIN;
  wire ENCODERCHROMAFORMAT_BIN;
  wire ENCODERCODING_BIN;
  wire ENCODERCOLORDEPTH_BIN;
  wire [2:0] ENCODERNUMCORES_BIN;
  wire [12:0] ENCVERTRESOLUTION_BIN;

`ifdef XIL_ATTR_TEST
  reg attr_test = 1'b1;
`else
  reg attr_test = 1'b0;
`endif
  reg attr_err = 1'b0;
  tri0 glblGSR = glbl.GSR;

  wire VCUPLARREADYAXILITEAPB_out;
  wire VCUPLAWREADYAXILITEAPB_out;
  wire VCUPLBVALIDAXILITEAPB_out;
  wire VCUPLCORESTATUSCLKPLL_out;
  wire VCUPLDECARPROT0_out;
  wire VCUPLDECARPROT1_out;
  wire VCUPLDECARVALID0_out;
  wire VCUPLDECARVALID1_out;
  wire VCUPLDECAWPROT0_out;
  wire VCUPLDECAWPROT1_out;
  wire VCUPLDECAWVALID0_out;
  wire VCUPLDECAWVALID1_out;
  wire VCUPLDECBREADY0_out;
  wire VCUPLDECBREADY1_out;
  wire VCUPLDECRREADY0_out;
  wire VCUPLDECRREADY1_out;
  wire VCUPLDECWLAST0_out;
  wire VCUPLDECWLAST1_out;
  wire VCUPLDECWVALID0_out;
  wire VCUPLDECWVALID1_out;
  wire VCUPLENCALL2CRVALID_out;
  wire VCUPLENCALL2CWVALID_out;
  wire VCUPLENCARPROT0_out;
  wire VCUPLENCARPROT1_out;
  wire VCUPLENCARVALID0_out;
  wire VCUPLENCARVALID1_out;
  wire VCUPLENCAWPROT0_out;
  wire VCUPLENCAWPROT1_out;
  wire VCUPLENCAWVALID0_out;
  wire VCUPLENCAWVALID1_out;
  wire VCUPLENCBREADY0_out;
  wire VCUPLENCBREADY1_out;
  wire VCUPLENCRREADY0_out;
  wire VCUPLENCRREADY1_out;
  wire VCUPLENCWLAST0_out;
  wire VCUPLENCWLAST1_out;
  wire VCUPLENCWVALID0_out;
  wire VCUPLENCWVALID1_out;
  wire VCUPLMCUMAXIICDCARLOCK_out;
  wire VCUPLMCUMAXIICDCARVALID_out;
  wire VCUPLMCUMAXIICDCAWLOCK_out;
  wire VCUPLMCUMAXIICDCAWVALID_out;
  wire VCUPLMCUMAXIICDCBREADY_out;
  wire VCUPLMCUMAXIICDCRREADY_out;
  wire VCUPLMCUMAXIICDCWLAST_out;
  wire VCUPLMCUMAXIICDCWVALID_out;
  wire VCUPLMCUSTATUSCLKPLL_out;
  wire VCUPLPINTREQ_out;
  wire VCUPLPLLSTATUSPLLLOCK_out;
  wire VCUPLPWRSUPPLYSTATUSVCCAUX_out;
  wire VCUPLPWRSUPPLYSTATUSVCUINT_out;
  wire VCUPLRVALIDAXILITEAPB_out;
  wire VCUPLWREADYAXILITEAPB_out;
  wire [127:0] VCUPLDECWDATA0_out;
  wire [127:0] VCUPLDECWDATA1_out;
  wire [127:0] VCUPLENCWDATA0_out;
  wire [127:0] VCUPLENCWDATA1_out;
  wire [16:0] VCUPLENCALL2CADDR_out;
  wire [1:0] VCUPLBRESPAXILITEAPB_out;
  wire [1:0] VCUPLDECARBURST0_out;
  wire [1:0] VCUPLDECARBURST1_out;
  wire [1:0] VCUPLDECAWBURST0_out;
  wire [1:0] VCUPLDECAWBURST1_out;
  wire [1:0] VCUPLENCARBURST0_out;
  wire [1:0] VCUPLENCARBURST1_out;
  wire [1:0] VCUPLENCAWBURST0_out;
  wire [1:0] VCUPLENCAWBURST1_out;
  wire [1:0] VCUPLMCUMAXIICDCARBURST_out;
  wire [1:0] VCUPLMCUMAXIICDCAWBURST_out;
  wire [1:0] VCUPLRRESPAXILITEAPB_out;
  wire [2:0] VCUPLDECARSIZE0_out;
  wire [2:0] VCUPLDECARSIZE1_out;
  wire [2:0] VCUPLDECAWSIZE0_out;
  wire [2:0] VCUPLDECAWSIZE1_out;
  wire [2:0] VCUPLENCARSIZE0_out;
  wire [2:0] VCUPLENCARSIZE1_out;
  wire [2:0] VCUPLENCAWSIZE0_out;
  wire [2:0] VCUPLENCAWSIZE1_out;
  wire [2:0] VCUPLMCUMAXIICDCARID_out;
  wire [2:0] VCUPLMCUMAXIICDCARPROT_out;
  wire [2:0] VCUPLMCUMAXIICDCARSIZE_out;
  wire [2:0] VCUPLMCUMAXIICDCAWID_out;
  wire [2:0] VCUPLMCUMAXIICDCAWPROT_out;
  wire [2:0] VCUPLMCUMAXIICDCAWSIZE_out;
  wire [319:0] VCUPLENCALL2CWDATA_out;
  wire [31:0] VCUPLMCUMAXIICDCWDATA_out;
  wire [31:0] VCUPLRDATAAXILITEAPB_out;
  wire [3:0] VCUPLDECARCACHE0_out;
  wire [3:0] VCUPLDECARCACHE1_out;
  wire [3:0] VCUPLDECARID0_out;
  wire [3:0] VCUPLDECARID1_out;
  wire [3:0] VCUPLDECARQOS0_out;
  wire [3:0] VCUPLDECARQOS1_out;
  wire [3:0] VCUPLDECAWCACHE0_out;
  wire [3:0] VCUPLDECAWCACHE1_out;
  wire [3:0] VCUPLDECAWID0_out;
  wire [3:0] VCUPLDECAWID1_out;
  wire [3:0] VCUPLDECAWQOS0_out;
  wire [3:0] VCUPLDECAWQOS1_out;
  wire [3:0] VCUPLENCARCACHE0_out;
  wire [3:0] VCUPLENCARCACHE1_out;
  wire [3:0] VCUPLENCARID0_out;
  wire [3:0] VCUPLENCARID1_out;
  wire [3:0] VCUPLENCARQOS0_out;
  wire [3:0] VCUPLENCARQOS1_out;
  wire [3:0] VCUPLENCAWCACHE0_out;
  wire [3:0] VCUPLENCAWCACHE1_out;
  wire [3:0] VCUPLENCAWID0_out;
  wire [3:0] VCUPLENCAWID1_out;
  wire [3:0] VCUPLENCAWQOS0_out;
  wire [3:0] VCUPLENCAWQOS1_out;
  wire [3:0] VCUPLMCUMAXIICDCARCACHE_out;
  wire [3:0] VCUPLMCUMAXIICDCARQOS_out;
  wire [3:0] VCUPLMCUMAXIICDCAWCACHE_out;
  wire [3:0] VCUPLMCUMAXIICDCAWQOS_out;
  wire [3:0] VCUPLMCUMAXIICDCWSTRB_out;
  wire [43:0] VCUPLDECARADDR0_out;
  wire [43:0] VCUPLDECARADDR1_out;
  wire [43:0] VCUPLDECAWADDR0_out;
  wire [43:0] VCUPLDECAWADDR1_out;
  wire [43:0] VCUPLENCARADDR0_out;
  wire [43:0] VCUPLENCARADDR1_out;
  wire [43:0] VCUPLENCAWADDR0_out;
  wire [43:0] VCUPLENCAWADDR1_out;
  wire [43:0] VCUPLMCUMAXIICDCARADDR_out;
  wire [43:0] VCUPLMCUMAXIICDCAWADDR_out;
  wire [7:0] VCUPLDECARLEN0_out;
  wire [7:0] VCUPLDECARLEN1_out;
  wire [7:0] VCUPLDECAWLEN0_out;
  wire [7:0] VCUPLDECAWLEN1_out;
  wire [7:0] VCUPLENCARLEN0_out;
  wire [7:0] VCUPLENCARLEN1_out;
  wire [7:0] VCUPLENCAWLEN0_out;
  wire [7:0] VCUPLENCAWLEN1_out;
  wire [7:0] VCUPLMCUMAXIICDCARLEN_out;
  wire [7:0] VCUPLMCUMAXIICDCAWLEN_out;

  wire INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD_in;
  wire PLVCUARVALIDAXILITEAPB_in;
  wire PLVCUAWVALIDAXILITEAPB_in;
  wire PLVCUAXIDECCLK_in;
  wire PLVCUAXIENCCLK_in;
  wire PLVCUAXILITECLK_in;
  wire PLVCUAXIMCUCLK_in;
  wire PLVCUBREADYAXILITEAPB_in;
  wire PLVCUCORECLK_in;
  wire PLVCUDECARREADY0_in;
  wire PLVCUDECARREADY1_in;
  wire PLVCUDECAWREADY0_in;
  wire PLVCUDECAWREADY1_in;
  wire PLVCUDECBVALID0_in;
  wire PLVCUDECBVALID1_in;
  wire PLVCUDECRLAST0_in;
  wire PLVCUDECRLAST1_in;
  wire PLVCUDECRVALID0_in;
  wire PLVCUDECRVALID1_in;
  wire PLVCUDECWREADY0_in;
  wire PLVCUDECWREADY1_in;
  wire PLVCUENCALL2CRREADY_in;
  wire PLVCUENCARREADY0_in;
  wire PLVCUENCARREADY1_in;
  wire PLVCUENCAWREADY0_in;
  wire PLVCUENCAWREADY1_in;
  wire PLVCUENCBVALID0_in;
  wire PLVCUENCBVALID1_in;
  wire PLVCUENCL2CCLK_in;
  wire PLVCUENCRLAST0_in;
  wire PLVCUENCRLAST1_in;
  wire PLVCUENCRVALID0_in;
  wire PLVCUENCRVALID1_in;
  wire PLVCUENCWREADY0_in;
  wire PLVCUENCWREADY1_in;
  wire PLVCUMCUCLK_in;
  wire PLVCUMCUMAXIICDCARREADY_in;
  wire PLVCUMCUMAXIICDCAWREADY_in;
  wire PLVCUMCUMAXIICDCBVALID_in;
  wire PLVCUMCUMAXIICDCRLAST_in;
  wire PLVCUMCUMAXIICDCRVALID_in;
  wire PLVCUMCUMAXIICDCWREADY_in;
  wire PLVCUPLLREFCLKPL_in;
  wire PLVCURAWRSTN_in;
  wire PLVCURREADYAXILITEAPB_in;
  wire PLVCUWVALIDAXILITEAPB_in;
  wire [127:0] PLVCUDECRDATA0_in;
  wire [127:0] PLVCUDECRDATA1_in;
  wire [127:0] PLVCUENCRDATA0_in;
  wire [127:0] PLVCUENCRDATA1_in;
  wire [19:0] PLVCUARADDRAXILITEAPB_in;
  wire [19:0] PLVCUAWADDRAXILITEAPB_in;
  wire [1:0] PLVCUDECBRESP0_in;
  wire [1:0] PLVCUDECBRESP1_in;
  wire [1:0] PLVCUDECRRESP0_in;
  wire [1:0] PLVCUDECRRESP1_in;
  wire [1:0] PLVCUENCBRESP0_in;
  wire [1:0] PLVCUENCBRESP1_in;
  wire [1:0] PLVCUENCRRESP0_in;
  wire [1:0] PLVCUENCRRESP1_in;
  wire [1:0] PLVCUMCUMAXIICDCBRESP_in;
  wire [1:0] PLVCUMCUMAXIICDCRRESP_in;
  wire [2:0] PLVCUARPROTAXILITEAPB_in;
  wire [2:0] PLVCUAWPROTAXILITEAPB_in;
  wire [2:0] PLVCUMCUMAXIICDCBID_in;
  wire [2:0] PLVCUMCUMAXIICDCRID_in;
  wire [319:0] PLVCUENCALL2CRDATA_in;
  wire [31:0] PLVCUMCUMAXIICDCRDATA_in;
  wire [31:0] PLVCUWDATAAXILITEAPB_in;
  wire [3:0] PLVCUDECBID0_in;
  wire [3:0] PLVCUDECBID1_in;
  wire [3:0] PLVCUDECRID0_in;
  wire [3:0] PLVCUDECRID1_in;
  wire [3:0] PLVCUENCBID0_in;
  wire [3:0] PLVCUENCBID1_in;
  wire [3:0] PLVCUENCRID0_in;
  wire [3:0] PLVCUENCRID1_in;
  wire [3:0] PLVCUWSTRBAXILITEAPB_in;

`ifdef XIL_TIMING
  wire PLVCUARVALIDAXILITEAPB_delay;
  wire PLVCUAWVALIDAXILITEAPB_delay;
  wire PLVCUAXILITECLK_delay;
  wire PLVCUBREADYAXILITEAPB_delay;
  wire PLVCURREADYAXILITEAPB_delay;
  wire PLVCUWVALIDAXILITEAPB_delay;
  wire [19:0] PLVCUARADDRAXILITEAPB_delay;
  wire [19:0] PLVCUAWADDRAXILITEAPB_delay;
  wire [31:0] PLVCUWDATAAXILITEAPB_delay;
  wire [3:0] PLVCUWSTRBAXILITEAPB_delay;
`endif

  assign VCUPLARREADYAXILITEAPB = VCUPLARREADYAXILITEAPB_out;
  assign VCUPLAWREADYAXILITEAPB = VCUPLAWREADYAXILITEAPB_out;
  assign VCUPLBRESPAXILITEAPB = VCUPLBRESPAXILITEAPB_out;
  assign VCUPLBVALIDAXILITEAPB = VCUPLBVALIDAXILITEAPB_out;
  assign VCUPLCORESTATUSCLKPLL = VCUPLCORESTATUSCLKPLL_out;
  assign VCUPLDECARADDR0 = VCUPLDECARADDR0_out;
  assign VCUPLDECARADDR1 = VCUPLDECARADDR1_out;
  assign VCUPLDECARBURST0 = VCUPLDECARBURST0_out;
  assign VCUPLDECARBURST1 = VCUPLDECARBURST1_out;
  assign VCUPLDECARCACHE0 = VCUPLDECARCACHE0_out;
  assign VCUPLDECARCACHE1 = VCUPLDECARCACHE1_out;
  assign VCUPLDECARID0 = VCUPLDECARID0_out;
  assign VCUPLDECARID1 = VCUPLDECARID1_out;
  assign VCUPLDECARLEN0 = VCUPLDECARLEN0_out;
  assign VCUPLDECARLEN1 = VCUPLDECARLEN1_out;
  assign VCUPLDECARPROT0 = VCUPLDECARPROT0_out;
  assign VCUPLDECARPROT1 = VCUPLDECARPROT1_out;
  assign VCUPLDECARQOS0 = VCUPLDECARQOS0_out;
  assign VCUPLDECARQOS1 = VCUPLDECARQOS1_out;
  assign VCUPLDECARSIZE0 = VCUPLDECARSIZE0_out;
  assign VCUPLDECARSIZE1 = VCUPLDECARSIZE1_out;
  assign VCUPLDECARVALID0 = VCUPLDECARVALID0_out;
  assign VCUPLDECARVALID1 = VCUPLDECARVALID1_out;
  assign VCUPLDECAWADDR0 = VCUPLDECAWADDR0_out;
  assign VCUPLDECAWADDR1 = VCUPLDECAWADDR1_out;
  assign VCUPLDECAWBURST0 = VCUPLDECAWBURST0_out;
  assign VCUPLDECAWBURST1 = VCUPLDECAWBURST1_out;
  assign VCUPLDECAWCACHE0 = VCUPLDECAWCACHE0_out;
  assign VCUPLDECAWCACHE1 = VCUPLDECAWCACHE1_out;
  assign VCUPLDECAWID0 = VCUPLDECAWID0_out;
  assign VCUPLDECAWID1 = VCUPLDECAWID1_out;
  assign VCUPLDECAWLEN0 = VCUPLDECAWLEN0_out;
  assign VCUPLDECAWLEN1 = VCUPLDECAWLEN1_out;
  assign VCUPLDECAWPROT0 = VCUPLDECAWPROT0_out;
  assign VCUPLDECAWPROT1 = VCUPLDECAWPROT1_out;
  assign VCUPLDECAWQOS0 = VCUPLDECAWQOS0_out;
  assign VCUPLDECAWQOS1 = VCUPLDECAWQOS1_out;
  assign VCUPLDECAWSIZE0 = VCUPLDECAWSIZE0_out;
  assign VCUPLDECAWSIZE1 = VCUPLDECAWSIZE1_out;
  assign VCUPLDECAWVALID0 = VCUPLDECAWVALID0_out;
  assign VCUPLDECAWVALID1 = VCUPLDECAWVALID1_out;
  assign VCUPLDECBREADY0 = VCUPLDECBREADY0_out;
  assign VCUPLDECBREADY1 = VCUPLDECBREADY1_out;
  assign VCUPLDECRREADY0 = VCUPLDECRREADY0_out;
  assign VCUPLDECRREADY1 = VCUPLDECRREADY1_out;
  assign VCUPLDECWDATA0 = VCUPLDECWDATA0_out;
  assign VCUPLDECWDATA1 = VCUPLDECWDATA1_out;
  assign VCUPLDECWLAST0 = VCUPLDECWLAST0_out;
  assign VCUPLDECWLAST1 = VCUPLDECWLAST1_out;
  assign VCUPLDECWVALID0 = VCUPLDECWVALID0_out;
  assign VCUPLDECWVALID1 = VCUPLDECWVALID1_out;
  assign VCUPLENCALL2CADDR = VCUPLENCALL2CADDR_out;
  assign VCUPLENCALL2CRVALID = VCUPLENCALL2CRVALID_out;
  assign VCUPLENCALL2CWDATA = VCUPLENCALL2CWDATA_out;
  assign VCUPLENCALL2CWVALID = VCUPLENCALL2CWVALID_out;
  assign VCUPLENCARADDR0 = VCUPLENCARADDR0_out;
  assign VCUPLENCARADDR1 = VCUPLENCARADDR1_out;
  assign VCUPLENCARBURST0 = VCUPLENCARBURST0_out;
  assign VCUPLENCARBURST1 = VCUPLENCARBURST1_out;
  assign VCUPLENCARCACHE0 = VCUPLENCARCACHE0_out;
  assign VCUPLENCARCACHE1 = VCUPLENCARCACHE1_out;
  assign VCUPLENCARID0 = VCUPLENCARID0_out;
  assign VCUPLENCARID1 = VCUPLENCARID1_out;
  assign VCUPLENCARLEN0 = VCUPLENCARLEN0_out;
  assign VCUPLENCARLEN1 = VCUPLENCARLEN1_out;
  assign VCUPLENCARPROT0 = VCUPLENCARPROT0_out;
  assign VCUPLENCARPROT1 = VCUPLENCARPROT1_out;
  assign VCUPLENCARQOS0 = VCUPLENCARQOS0_out;
  assign VCUPLENCARQOS1 = VCUPLENCARQOS1_out;
  assign VCUPLENCARSIZE0 = VCUPLENCARSIZE0_out;
  assign VCUPLENCARSIZE1 = VCUPLENCARSIZE1_out;
  assign VCUPLENCARVALID0 = VCUPLENCARVALID0_out;
  assign VCUPLENCARVALID1 = VCUPLENCARVALID1_out;
  assign VCUPLENCAWADDR0 = VCUPLENCAWADDR0_out;
  assign VCUPLENCAWADDR1 = VCUPLENCAWADDR1_out;
  assign VCUPLENCAWBURST0 = VCUPLENCAWBURST0_out;
  assign VCUPLENCAWBURST1 = VCUPLENCAWBURST1_out;
  assign VCUPLENCAWCACHE0 = VCUPLENCAWCACHE0_out;
  assign VCUPLENCAWCACHE1 = VCUPLENCAWCACHE1_out;
  assign VCUPLENCAWID0 = VCUPLENCAWID0_out;
  assign VCUPLENCAWID1 = VCUPLENCAWID1_out;
  assign VCUPLENCAWLEN0 = VCUPLENCAWLEN0_out;
  assign VCUPLENCAWLEN1 = VCUPLENCAWLEN1_out;
  assign VCUPLENCAWPROT0 = VCUPLENCAWPROT0_out;
  assign VCUPLENCAWPROT1 = VCUPLENCAWPROT1_out;
  assign VCUPLENCAWQOS0 = VCUPLENCAWQOS0_out;
  assign VCUPLENCAWQOS1 = VCUPLENCAWQOS1_out;
  assign VCUPLENCAWSIZE0 = VCUPLENCAWSIZE0_out;
  assign VCUPLENCAWSIZE1 = VCUPLENCAWSIZE1_out;
  assign VCUPLENCAWVALID0 = VCUPLENCAWVALID0_out;
  assign VCUPLENCAWVALID1 = VCUPLENCAWVALID1_out;
  assign VCUPLENCBREADY0 = VCUPLENCBREADY0_out;
  assign VCUPLENCBREADY1 = VCUPLENCBREADY1_out;
  assign VCUPLENCRREADY0 = VCUPLENCRREADY0_out;
  assign VCUPLENCRREADY1 = VCUPLENCRREADY1_out;
  assign VCUPLENCWDATA0 = VCUPLENCWDATA0_out;
  assign VCUPLENCWDATA1 = VCUPLENCWDATA1_out;
  assign VCUPLENCWLAST0 = VCUPLENCWLAST0_out;
  assign VCUPLENCWLAST1 = VCUPLENCWLAST1_out;
  assign VCUPLENCWVALID0 = VCUPLENCWVALID0_out;
  assign VCUPLENCWVALID1 = VCUPLENCWVALID1_out;
  assign VCUPLMCUMAXIICDCARADDR = VCUPLMCUMAXIICDCARADDR_out;
  assign VCUPLMCUMAXIICDCARBURST = VCUPLMCUMAXIICDCARBURST_out;
  assign VCUPLMCUMAXIICDCARCACHE = VCUPLMCUMAXIICDCARCACHE_out;
  assign VCUPLMCUMAXIICDCARID = VCUPLMCUMAXIICDCARID_out;
  assign VCUPLMCUMAXIICDCARLEN = VCUPLMCUMAXIICDCARLEN_out;
  assign VCUPLMCUMAXIICDCARLOCK = VCUPLMCUMAXIICDCARLOCK_out;
  assign VCUPLMCUMAXIICDCARPROT = VCUPLMCUMAXIICDCARPROT_out;
  assign VCUPLMCUMAXIICDCARQOS = VCUPLMCUMAXIICDCARQOS_out;
  assign VCUPLMCUMAXIICDCARSIZE = VCUPLMCUMAXIICDCARSIZE_out;
  assign VCUPLMCUMAXIICDCARVALID = VCUPLMCUMAXIICDCARVALID_out;
  assign VCUPLMCUMAXIICDCAWADDR = VCUPLMCUMAXIICDCAWADDR_out;
  assign VCUPLMCUMAXIICDCAWBURST = VCUPLMCUMAXIICDCAWBURST_out;
  assign VCUPLMCUMAXIICDCAWCACHE = VCUPLMCUMAXIICDCAWCACHE_out;
  assign VCUPLMCUMAXIICDCAWID = VCUPLMCUMAXIICDCAWID_out;
  assign VCUPLMCUMAXIICDCAWLEN = VCUPLMCUMAXIICDCAWLEN_out;
  assign VCUPLMCUMAXIICDCAWLOCK = VCUPLMCUMAXIICDCAWLOCK_out;
  assign VCUPLMCUMAXIICDCAWPROT = VCUPLMCUMAXIICDCAWPROT_out;
  assign VCUPLMCUMAXIICDCAWQOS = VCUPLMCUMAXIICDCAWQOS_out;
  assign VCUPLMCUMAXIICDCAWSIZE = VCUPLMCUMAXIICDCAWSIZE_out;
  assign VCUPLMCUMAXIICDCAWVALID = VCUPLMCUMAXIICDCAWVALID_out;
  assign VCUPLMCUMAXIICDCBREADY = VCUPLMCUMAXIICDCBREADY_out;
  assign VCUPLMCUMAXIICDCRREADY = VCUPLMCUMAXIICDCRREADY_out;
  assign VCUPLMCUMAXIICDCWDATA = VCUPLMCUMAXIICDCWDATA_out;
  assign VCUPLMCUMAXIICDCWLAST = VCUPLMCUMAXIICDCWLAST_out;
  assign VCUPLMCUMAXIICDCWSTRB = VCUPLMCUMAXIICDCWSTRB_out;
  assign VCUPLMCUMAXIICDCWVALID = VCUPLMCUMAXIICDCWVALID_out;
  assign VCUPLMCUSTATUSCLKPLL = VCUPLMCUSTATUSCLKPLL_out;
  assign VCUPLPINTREQ = VCUPLPINTREQ_out;
  assign VCUPLPLLSTATUSPLLLOCK = VCUPLPLLSTATUSPLLLOCK_out;
  assign VCUPLPWRSUPPLYSTATUSVCCAUX = VCUPLPWRSUPPLYSTATUSVCCAUX_out;
  assign VCUPLPWRSUPPLYSTATUSVCUINT = VCUPLPWRSUPPLYSTATUSVCUINT_out;
  assign VCUPLRDATAAXILITEAPB = VCUPLRDATAAXILITEAPB_out;
  assign VCUPLRRESPAXILITEAPB = VCUPLRRESPAXILITEAPB_out;
  assign VCUPLRVALIDAXILITEAPB = VCUPLRVALIDAXILITEAPB_out;
  assign VCUPLWREADYAXILITEAPB = VCUPLWREADYAXILITEAPB_out;

`ifdef XIL_TIMING
  assign PLVCUARADDRAXILITEAPB_in = PLVCUARADDRAXILITEAPB_delay;
  assign PLVCUARVALIDAXILITEAPB_in = PLVCUARVALIDAXILITEAPB_delay;
  assign PLVCUAWADDRAXILITEAPB_in = PLVCUAWADDRAXILITEAPB_delay;
  assign PLVCUAWVALIDAXILITEAPB_in = PLVCUAWVALIDAXILITEAPB_delay;
  assign PLVCUAXILITECLK_in = PLVCUAXILITECLK_delay;
  assign PLVCUBREADYAXILITEAPB_in = PLVCUBREADYAXILITEAPB_delay;
  assign PLVCURREADYAXILITEAPB_in = PLVCURREADYAXILITEAPB_delay;
  assign PLVCUWDATAAXILITEAPB_in = PLVCUWDATAAXILITEAPB_delay;
  assign PLVCUWSTRBAXILITEAPB_in = PLVCUWSTRBAXILITEAPB_delay;
  assign PLVCUWVALIDAXILITEAPB_in = PLVCUWVALIDAXILITEAPB_delay;
`else
  assign PLVCUARADDRAXILITEAPB_in = PLVCUARADDRAXILITEAPB;
  assign PLVCUARVALIDAXILITEAPB_in = PLVCUARVALIDAXILITEAPB;
  assign PLVCUAWADDRAXILITEAPB_in = PLVCUAWADDRAXILITEAPB;
  assign PLVCUAWVALIDAXILITEAPB_in = PLVCUAWVALIDAXILITEAPB;
  assign PLVCUAXILITECLK_in = PLVCUAXILITECLK;
  assign PLVCUBREADYAXILITEAPB_in = PLVCUBREADYAXILITEAPB;
  assign PLVCURREADYAXILITEAPB_in = PLVCURREADYAXILITEAPB;
  assign PLVCUWDATAAXILITEAPB_in = PLVCUWDATAAXILITEAPB;
  assign PLVCUWSTRBAXILITEAPB_in = PLVCUWSTRBAXILITEAPB;
  assign PLVCUWVALIDAXILITEAPB_in = PLVCUWVALIDAXILITEAPB;
`endif
  assign INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD_in = INITPLVCUGASKETCLAMPCONTROLLVLSHVCCINTD;
  assign PLVCUARPROTAXILITEAPB_in = PLVCUARPROTAXILITEAPB;
  assign PLVCUAWPROTAXILITEAPB_in = PLVCUAWPROTAXILITEAPB;
  assign PLVCUAXIDECCLK_in = PLVCUAXIDECCLK;
  assign PLVCUAXIENCCLK_in = PLVCUAXIENCCLK;
  assign PLVCUAXIMCUCLK_in = PLVCUAXIMCUCLK;
  assign PLVCUCORECLK_in = PLVCUCORECLK;
  assign PLVCUDECARREADY0_in = PLVCUDECARREADY0;
  assign PLVCUDECARREADY1_in = PLVCUDECARREADY1;
  assign PLVCUDECAWREADY0_in = PLVCUDECAWREADY0;
  assign PLVCUDECAWREADY1_in = PLVCUDECAWREADY1;
  assign PLVCUDECBID0_in = PLVCUDECBID0;
  assign PLVCUDECBID1_in = PLVCUDECBID1;
  assign PLVCUDECBRESP0_in = PLVCUDECBRESP0;
  assign PLVCUDECBRESP1_in = PLVCUDECBRESP1;
  assign PLVCUDECBVALID0_in = PLVCUDECBVALID0;
  assign PLVCUDECBVALID1_in = PLVCUDECBVALID1;
  assign PLVCUDECRDATA0_in = PLVCUDECRDATA0;
  assign PLVCUDECRDATA1_in = PLVCUDECRDATA1;
  assign PLVCUDECRID0_in = PLVCUDECRID0;
  assign PLVCUDECRID1_in = PLVCUDECRID1;
  assign PLVCUDECRLAST0_in = PLVCUDECRLAST0;
  assign PLVCUDECRLAST1_in = PLVCUDECRLAST1;
  assign PLVCUDECRRESP0_in = PLVCUDECRRESP0;
  assign PLVCUDECRRESP1_in = PLVCUDECRRESP1;
  assign PLVCUDECRVALID0_in = PLVCUDECRVALID0;
  assign PLVCUDECRVALID1_in = PLVCUDECRVALID1;
  assign PLVCUDECWREADY0_in = PLVCUDECWREADY0;
  assign PLVCUDECWREADY1_in = PLVCUDECWREADY1;
  assign PLVCUENCALL2CRDATA_in = PLVCUENCALL2CRDATA;
  assign PLVCUENCALL2CRREADY_in = (PLVCUENCALL2CRREADY === 1'bz) || PLVCUENCALL2CRREADY; // rv 1
  assign PLVCUENCARREADY0_in = PLVCUENCARREADY0;
  assign PLVCUENCARREADY1_in = PLVCUENCARREADY1;
  assign PLVCUENCAWREADY0_in = PLVCUENCAWREADY0;
  assign PLVCUENCAWREADY1_in = PLVCUENCAWREADY1;
  assign PLVCUENCBID0_in = PLVCUENCBID0;
  assign PLVCUENCBID1_in = PLVCUENCBID1;
  assign PLVCUENCBRESP0_in = PLVCUENCBRESP0;
  assign PLVCUENCBRESP1_in = PLVCUENCBRESP1;
  assign PLVCUENCBVALID0_in = PLVCUENCBVALID0;
  assign PLVCUENCBVALID1_in = PLVCUENCBVALID1;
  assign PLVCUENCL2CCLK_in = PLVCUENCL2CCLK;
  assign PLVCUENCRDATA0_in = PLVCUENCRDATA0;
  assign PLVCUENCRDATA1_in = PLVCUENCRDATA1;
  assign PLVCUENCRID0_in = PLVCUENCRID0;
  assign PLVCUENCRID1_in = PLVCUENCRID1;
  assign PLVCUENCRLAST0_in = PLVCUENCRLAST0;
  assign PLVCUENCRLAST1_in = PLVCUENCRLAST1;
  assign PLVCUENCRRESP0_in = PLVCUENCRRESP0;
  assign PLVCUENCRRESP1_in = PLVCUENCRRESP1;
  assign PLVCUENCRVALID0_in = PLVCUENCRVALID0;
  assign PLVCUENCRVALID1_in = PLVCUENCRVALID1;
  assign PLVCUENCWREADY0_in = PLVCUENCWREADY0;
  assign PLVCUENCWREADY1_in = PLVCUENCWREADY1;
  assign PLVCUMCUCLK_in = PLVCUMCUCLK;
  assign PLVCUMCUMAXIICDCARREADY_in = PLVCUMCUMAXIICDCARREADY;
  assign PLVCUMCUMAXIICDCAWREADY_in = PLVCUMCUMAXIICDCAWREADY;
  assign PLVCUMCUMAXIICDCBID_in = PLVCUMCUMAXIICDCBID;
  assign PLVCUMCUMAXIICDCBRESP_in = PLVCUMCUMAXIICDCBRESP;
  assign PLVCUMCUMAXIICDCBVALID_in = PLVCUMCUMAXIICDCBVALID;
  assign PLVCUMCUMAXIICDCRDATA_in = PLVCUMCUMAXIICDCRDATA;
  assign PLVCUMCUMAXIICDCRID_in = PLVCUMCUMAXIICDCRID;
  assign PLVCUMCUMAXIICDCRLAST_in = PLVCUMCUMAXIICDCRLAST;
  assign PLVCUMCUMAXIICDCRRESP_in = PLVCUMCUMAXIICDCRRESP;
  assign PLVCUMCUMAXIICDCRVALID_in = PLVCUMCUMAXIICDCRVALID;
  assign PLVCUMCUMAXIICDCWREADY_in = PLVCUMCUMAXIICDCWREADY;
  assign PLVCUPLLREFCLKPL_in = PLVCUPLLREFCLKPL;
  assign PLVCURAWRSTN_in = PLVCURAWRSTN;

  assign CORECLKREQ_BIN = CORECLKREQ_REG;
  
  assign DECHORRESOLUTION_BIN = DECHORRESOLUTION_REG;
  
  assign DECODERCHROMAFORMAT_BIN =
      (DECODERCHROMAFORMAT_REG == "4_2_2") ? DECODERCHROMAFORMAT_4_2_2 :
      (DECODERCHROMAFORMAT_REG == "4_2_0") ? DECODERCHROMAFORMAT_4_2_0 :
       DECODERCHROMAFORMAT_4_2_2;
  
  assign DECODERCODING_BIN =
      (DECODERCODING_REG == "H.265") ? DECODERCODING_H_265 :
      (DECODERCODING_REG == "H.264") ? DECODERCODING_H_264 :
       DECODERCODING_H_265;
  
  assign DECODERCOLORDEPTH_BIN =
      (DECODERCOLORDEPTH_REG == 10) ? DECODERCOLORDEPTH_10 :
      (DECODERCOLORDEPTH_REG == 8) ? DECODERCOLORDEPTH_8 :
       DECODERCOLORDEPTH_10;
  
  assign DECODERNUMCORES_BIN = DECODERNUMCORES_REG;
  
  assign DECVERTRESOLUTION_BIN = DECVERTRESOLUTION_REG;
  
  assign ENABLEDECODER_BIN =
      (ENABLEDECODER_REG == "TRUE") ? ENABLEDECODER_TRUE :
      (ENABLEDECODER_REG == "FALSE") ? ENABLEDECODER_FALSE :
       ENABLEDECODER_TRUE;
  
  assign ENABLEENCODER_BIN =
      (ENABLEENCODER_REG == "TRUE") ? ENABLEENCODER_TRUE :
      (ENABLEENCODER_REG == "FALSE") ? ENABLEENCODER_FALSE :
       ENABLEENCODER_TRUE;
  
  assign ENCHORRESOLUTION_BIN = ENCHORRESOLUTION_REG;
  
  assign ENCODERCHROMAFORMAT_BIN =
      (ENCODERCHROMAFORMAT_REG == "4_2_2") ? ENCODERCHROMAFORMAT_4_2_2 :
      (ENCODERCHROMAFORMAT_REG == "4_2_0") ? ENCODERCHROMAFORMAT_4_2_0 :
       ENCODERCHROMAFORMAT_4_2_2;
  
  assign ENCODERCODING_BIN =
      (ENCODERCODING_REG == "H.265") ? ENCODERCODING_H_265 :
      (ENCODERCODING_REG == "H.264") ? ENCODERCODING_H_264 :
       ENCODERCODING_H_265;
  
  assign ENCODERCOLORDEPTH_BIN =
      (ENCODERCOLORDEPTH_REG == 10) ? ENCODERCOLORDEPTH_10 :
      (ENCODERCOLORDEPTH_REG == 8) ? ENCODERCOLORDEPTH_8 :
       ENCODERCOLORDEPTH_10;
  
  assign ENCODERNUMCORES_BIN = ENCODERNUMCORES_REG;
  
  assign ENCVERTRESOLUTION_BIN = ENCVERTRESOLUTION_REG;
  
  initial begin
    #1;
    trig_attr = ~trig_attr;
  end
  
  always @ (trig_attr) begin
    #1;
    if ((attr_test == 1'b1) ||
        ((CORECLKREQ_REG < 0) || (CORECLKREQ_REG > 667))) begin
      $display("Error: [Unisim %s-101] CORECLKREQ attribute is set to %d.  Legal values for this attribute are 0 to 667. Instance: %m", MODULE_NAME, CORECLKREQ_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECHORRESOLUTION_REG < 320) || (DECHORRESOLUTION_REG > 8192))) begin
      $display("Error: [Unisim %s-102] DECHORRESOLUTION attribute is set to %d.  Legal values for this attribute are 320 to 8192. Instance: %m", MODULE_NAME, DECHORRESOLUTION_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECODERCHROMAFORMAT_REG != "4_2_2") &&
         (DECODERCHROMAFORMAT_REG != "4_2_0"))) begin
      $display("Error: [Unisim %s-103] DECODERCHROMAFORMAT attribute is set to %s.  Legal values for this attribute are 4_2_2 or 4_2_0. Instance: %m", MODULE_NAME, DECODERCHROMAFORMAT_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECODERCODING_REG != "H.265") &&
         (DECODERCODING_REG != "H.264"))) begin
      $display("Error: [Unisim %s-104] DECODERCODING attribute is set to %s.  Legal values for this attribute are H.265 or H.264. Instance: %m", MODULE_NAME, DECODERCODING_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECODERCOLORDEPTH_REG != 10) &&
         (DECODERCOLORDEPTH_REG != 8))) begin
      $display("Error: [Unisim %s-105] DECODERCOLORDEPTH attribute is set to %d.  Legal values for this attribute are 10 or 8. Instance: %m", MODULE_NAME, DECODERCOLORDEPTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECODERNUMCORES_REG < 1) || (DECODERNUMCORES_REG > 2))) begin
      $display("Error: [Unisim %s-106] DECODERNUMCORES attribute is set to %d.  Legal values for this attribute are 1 to 2. Instance: %m", MODULE_NAME, DECODERNUMCORES_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((DECVERTRESOLUTION_REG < 240) || (DECVERTRESOLUTION_REG > 4352))) begin
      $display("Error: [Unisim %s-107] DECVERTRESOLUTION attribute is set to %d.  Legal values for this attribute are 240 to 4352. Instance: %m", MODULE_NAME, DECVERTRESOLUTION_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENABLEDECODER_REG != "TRUE") &&
         (ENABLEDECODER_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-108] ENABLEDECODER attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, ENABLEDECODER_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENABLEENCODER_REG != "TRUE") &&
         (ENABLEENCODER_REG != "FALSE"))) begin
      $display("Error: [Unisim %s-109] ENABLEENCODER attribute is set to %s.  Legal values for this attribute are TRUE or FALSE. Instance: %m", MODULE_NAME, ENABLEENCODER_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCHORRESOLUTION_REG < 320) || (ENCHORRESOLUTION_REG > 8192))) begin
      $display("Error: [Unisim %s-110] ENCHORRESOLUTION attribute is set to %d.  Legal values for this attribute are 320 to 8192. Instance: %m", MODULE_NAME, ENCHORRESOLUTION_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCODERCHROMAFORMAT_REG != "4_2_2") &&
         (ENCODERCHROMAFORMAT_REG != "4_2_0"))) begin
      $display("Error: [Unisim %s-111] ENCODERCHROMAFORMAT attribute is set to %s.  Legal values for this attribute are 4_2_2 or 4_2_0. Instance: %m", MODULE_NAME, ENCODERCHROMAFORMAT_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCODERCODING_REG != "H.265") &&
         (ENCODERCODING_REG != "H.264"))) begin
      $display("Error: [Unisim %s-112] ENCODERCODING attribute is set to %s.  Legal values for this attribute are H.265 or H.264. Instance: %m", MODULE_NAME, ENCODERCODING_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCODERCOLORDEPTH_REG != 10) &&
         (ENCODERCOLORDEPTH_REG != 8))) begin
      $display("Error: [Unisim %s-113] ENCODERCOLORDEPTH attribute is set to %d.  Legal values for this attribute are 10 or 8. Instance: %m", MODULE_NAME, ENCODERCOLORDEPTH_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCODERNUMCORES_REG < 1) || (ENCODERNUMCORES_REG > 4))) begin
      $display("Error: [Unisim %s-114] ENCODERNUMCORES attribute is set to %d.  Legal values for this attribute are 1 to 4. Instance: %m", MODULE_NAME, ENCODERNUMCORES_REG);
      attr_err = 1'b1;
    end
    
    if ((attr_test == 1'b1) ||
        ((ENCVERTRESOLUTION_REG < 240) || (ENCVERTRESOLUTION_REG > 4352))) begin
      $display("Error: [Unisim %s-115] ENCVERTRESOLUTION attribute is set to %d.  Legal values for this attribute are 240 to 4352. Instance: %m", MODULE_NAME, ENCVERTRESOLUTION_REG);
      attr_err = 1'b1;
    end
    
    if (attr_err == 1'b1) #1 $finish;
  end

`ifdef XIL_TIMING
  reg notifier;
`endif

  specify
    (PLVCUAXILITECLK => VCUPLARREADYAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLAWREADYAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBRESPAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBRESPAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLBVALIDAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLPINTREQ) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[10]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[11]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[12]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[13]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[14]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[15]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[16]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[17]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[18]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[19]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[20]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[21]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[22]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[23]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[24]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[25]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[26]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[27]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[28]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[29]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[2]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[30]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[31]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[3]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[4]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[5]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[6]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[7]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[8]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRDATAAXILITEAPB[9]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRRESPAXILITEAPB[0]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRRESPAXILITEAPB[1]) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLRVALIDAXILITEAPB) = (100:100:100, 100:100:100);
    (PLVCUAXILITECLK => VCUPLWREADYAXILITEAPB) = (100:100:100, 100:100:100);
`ifdef XIL_TIMING
    $period (negedge PLVCUAXILITECLK, 0:0:0, notifier);
    $period (negedge PLVCUCORECLK, 0:0:0, notifier);
    $period (negedge PLVCUMCUCLK, 0:0:0, notifier);
    $period (negedge PLVCUPLLREFCLKPL, 0:0:0, notifier);
    $period (posedge PLVCUAXILITECLK, 0:0:0, notifier);
    $period (posedge PLVCUCORECLK, 0:0:0, notifier);
    $period (posedge PLVCUMCUCLK, 0:0:0, notifier);
    $period (posedge PLVCUPLLREFCLKPL, 0:0:0, notifier);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARADDRAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUARVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARVALIDAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWADDRAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUAWVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWVALIDAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUBREADYAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUBREADYAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCURREADYAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCURREADYAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[20], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[20]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[21], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[21]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[22], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[22]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[23], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[23]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[24], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[24]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[25], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[25]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[26], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[26]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[27], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[27]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[28], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[28]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[29], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[29]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[30], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[30]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[31], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[31]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWDATAAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWSTRBAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWSTRBAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWSTRBAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWSTRBAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, negedge PLVCUWVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWVALIDAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARADDRAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARADDRAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUARVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUARVALIDAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWADDRAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWADDRAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUAWVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUAWVALIDAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUBREADYAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUBREADYAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCURREADYAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCURREADYAXILITEAPB_delay);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[10], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[10]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[11], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[11]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[12], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[12]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[13], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[13]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[14], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[14]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[15], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[15]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[16], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[16]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[17], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[17]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[18], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[18]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[19], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[19]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[20], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[20]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[21], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[21]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[22], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[22]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[23], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[23]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[24], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[24]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[25], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[25]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[26], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[26]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[27], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[27]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[28], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[28]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[29], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[29]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[30], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[30]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[31], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[31]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[4], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[4]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[5], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[5]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[6], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[6]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[7], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[7]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[8], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[8]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWDATAAXILITEAPB[9], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWDATAAXILITEAPB_delay[9]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWSTRBAXILITEAPB[0], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[0]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWSTRBAXILITEAPB[1], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[1]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWSTRBAXILITEAPB[2], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[2]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWSTRBAXILITEAPB[3], 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWSTRBAXILITEAPB_delay[3]);
    $setuphold (posedge PLVCUAXILITECLK, posedge PLVCUWVALIDAXILITEAPB, 0:0:0, 0:0:0, notifier, , , PLVCUAXILITECLK_delay, PLVCUWVALIDAXILITEAPB_delay);
    $width (negedge PLVCUAXILITECLK, 0:0:0, 0, notifier);
    $width (negedge PLVCUCORECLK, 0:0:0, 0, notifier);
    $width (negedge PLVCUMCUCLK, 0:0:0, 0, notifier);
    $width (negedge PLVCUPLLREFCLKPL, 0:0:0, 0, notifier);
    $width (posedge PLVCUAXILITECLK, 0:0:0, 0, notifier);
    $width (posedge PLVCUCORECLK, 0:0:0, 0, notifier);
    $width (posedge PLVCUMCUCLK, 0:0:0, 0, notifier);
    $width (posedge PLVCUPLLREFCLKPL, 0:0:0, 0, notifier);
`endif
    specparam PATHPULSE$ = 0;
  endspecify

endmodule

`endcelldefine
